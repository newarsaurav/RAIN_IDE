from PyQt5.QtWidgets import *
# git update
from PyQt5.Qt import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
# from PyQt5.Qsci import *
import sys
from pathlib import *
import os
class Windows(QMainWindow):
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.current_file = None


    def init_ui(self):
        self.setWindowTitle('IDE | AI Powered Browser ')
        self.setWindowIcon(QIcon('gui_app/icon_netflix.png'))
        
        self.setup_menu()
        self.setup_body()
        
        self.show()
        
    def setup_menu(self):
        menubar = self.menuBar()

        # FILE MENUS
        file_menu = menubar.addMenu('File')

        new_action = QAction('New', self)
        new_action.triggered.connect(self.new_action)
        file_menu.addAction(new_action)

        open_action = QAction('Open', self)
        open_action.triggered.connect(self.open_action)
        file_menu.addAction(open_action)

        save_action = QAction('Save', self)
        save_action.triggered.connect(self.save_action)
        file_menu.addAction(save_action)

        save_as_action = QAction('Save As ...', self)
        save_as_action.triggered.connect(self.save_as_action)
        file_menu.addAction(save_as_action)

        # EDIT MENUS
        edit_menu = menubar.addMenu('Edit')

        copy_action = QAction('Copy', self)
        copy_action.triggered.connect(self.copy_action)
        edit_menu.addAction(copy_action)

        cut_action = QAction('Cut', self)
        cut_action.triggered.connect(self.cut_action)
        edit_menu.addAction(cut_action)

        paste_action = QAction('Paste', self)
        paste_action.triggered.connect(self.paste_action)
        edit_menu.addAction(paste_action)

        # RUN MENUS
        run_menu = menubar.addMenu('Run')
        start_action = QAction('Start Action', self)
        start_action.triggered.connect(self.start_action)
        run_menu.addAction(start_action)

    def new_action(self):
        print('new file')
        

    def open_action(self):
        print('new open action')
        file_name = QFileDialog.getOpenFileName(self, 'Open File', r'C:\Users\newar\OneDrive\Desktop\Browser-AIPoweredBrowserRain', 'Text files (*)')
        fname = file_name[0].split('/')
        self.setWindowTitle(fname[-1])
        with open(file_name[0], 'r') as file:
            filetext = file.read()
            self.text_edit.setText(filetext)
        self.current_path = file_name[0]
        print(f'{self.current_path}')
    
    def save_action(self):
        print('new save only')

    def save_as_action(self):
        print('new  save_as_action')

    def copy_action(self):
        print('new copy')
    
    def paste_action(self):
        print('new paste')
    
    def cut_action(self):
        print('new cut')

    def start_action(self):
        print('new start action')

    def setup_body(self):
        # body 
        body_frame = QFrame()
        body_frame.setFrameShape(QFrame.NoFrame)
        body_frame.setLineWidth(0)
        body_frame.setMidLineWidth(0)
        body_frame.setContentsMargins(0 , 0 , 0 , 0)
        body_frame.setSizePolicy(QSizePolicy.Expanding , QSizePolicy.Expanding)

        body = QHBoxLayout()
        body.setContentsMargins(0,0,0,0)
        body.setSpacing(0)
        body_frame.setLayout(body)

        # SIDE BAR 
        self.side_bar = QFrame()
        self.side_bar.setFrameShape(QFrame.StyledPanel)
        self.side_bar.setFrameShadow(QFrame.Plain)

        side_bar_layout = QHBoxLayout()
        side_bar_layout.setContentsMargins(5,10,5,0)
        side_bar_layout.setSpacing(0)
        side_bar_layout.setAlignment(Qt.AlignTop | Qt.AlignCenter)

        # setup labels
        folder_label = QLabel()
        folder_label.setPixmap(QPixmap("./src/icons/folder-icon-blue.svg").scaled(QSize(25,25)))
        # folder_label.setAlignment(Qt.Alignment.AlignTop)
        # folder_label.setFont(self.window_font)
        folder_label.mousePressEvent = self.show_hide_tab
        side_bar_layout.addWidget(folder_label)
        self.side_bar.setLayout(side_bar_layout)

        body.addWidget(self.side_bar)

        self.hsplit = QSplitter(Qt.Horizontal)

        self.tree_frame = QFrame()
        self.tree_frame.setLineWidth(1)
        self.tree_frame.setMaximumWidth(400)
        self.tree_frame.setMinimumWidth(200)
        self.tree_frame.setBaseSize(100,0)
        # self.tree_frame.setContentsMargins(0 , 0 , 0 , 0)

        tree_frame_layout =  QVBoxLayout()
        # self.tree_frame_layout.setContentsMargins(0,0,0,0)
        # self.tree_frame_layout.setSpacing(0)
        self.tree_frame.setStyleSheet('''
            QFrame{
                background-color:#21252b;
                border-radius:5px;
                border:none;
                                      padding:5px;
                                      color:#D3D3D3
            }
            QFrame:hover{
                                      color:white;
            }
        ''')

        # to show filesystem model to show in tree view
        self.model = QFileSystemModel()
        self.model.setRootPath(os.getcwd())
        # file system filters

        self.model.setFilter(QDir.NoDotAndDotDot | QDir.AllDirs | QDir.Files)

        #Tree View
        self.tree_view = QTreeView()
        
        self.tree_view.setModel(self.model)
        self.tree_view.setRootIndex(self.model.index(os.getcwd()))
        self.tree_view.setSelectionMode(QTreeView.SingleSelection)
        self.tree_view.setSelectionBehavior(QTreeView.SelectRows)
        self.tree_view.setEditTriggers(QTreeView.NoEditTriggers)

        #add custom context menu
        self.tree_view.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tree_view.customContextMenuRequested.connect(self.tree_view_context_menu)

        #handaling click
        self.tree_view.clicked.connect(self.tree_view_clicked)
        self.tree_view.setIndentation(10)
        self.tree_view.setSizePolicy(QSizePolicy.Expanding , QSizePolicy.Expanding)

        # hide header and hide other cilumns except for name
        self.tree_view.setHeaderHidden(True) #hiding header
        self.tree_view.setColumnHidden(1,True)
        self.tree_view.setColumnHidden(2,True)
        self.tree_view.setColumnHidden(3,True)

        # setup layout
        tree_frame_layout.addWidget(self.tree_view)
        self.tree_frame.setLayout(tree_frame_layout)

        #Tab widget to add editor to
        self.tab_view = QTabWidget()
        self.tab_view.setContentsMargins(0,0,0,0)
        self.tab_view.setTabsClosable(True)
        self.tab_view.setMovable(True)
        self.tab_view.setDocumentMode(True)
        

        # add tree view and tab view
        self.hsplit.addWidget(self.tree_frame)
        self.hsplit.addWidget(self.tab_view)

        body.addWidget(self.hsplit)
        body_frame.setLayout(body)

        self.setCentralWidget(body_frame)

    def show_hide_tab():
        ...

    def tree_view_context_menu():
        ...
    def tree_view_clicked(self,index:QModelIndex):
        path = self.model.filePath(index)
        p=Path(path)
        self.set_new_tab(p)

    def get_editor(self):
        editor = QTextEdit()

        # editor.setIndentationGuide(True)
        # editor.setTabWidth(4)
        # editor.setIndentationUserTabs(False)
        # self.setAutoIndent(True)
        return editor
    
    def is_binary(self, path):
        with open(path,'rb') as f:
            return b'\0' in f.read(1024)
        

    def set_new_tab(self,path:Path , is_new_file = False):
        if not path.is_file():
            return
        if not is_new_file and self.is_binary(path):
            self.statusBar().showMessage("Cannot Open Binary File" , 2000)

        # check if file already open
        if not is_new_file:
            for i in range(self.tab_view.count()):
                if self.tab_view.tabText(i) == path.name:
                    self.tab_view.setCurrentIndex(i)
                    self.current_file=path
                    return

        # create new Tab
        editor = self.get_editor()
        self.tab_view.addTab(editor, path.name)
        if not is_new_file:
            editor.setText(path.read_text())
        self.setWindowTitle(path.name)
        self.current_file= path
        self.tab_view.setCurrentIndex(self.tab_view.count() - 1)
        self.statusBar().showMessage(f"Opened {path.name}",2000)








app = QApplication(sys.argv)
screen = Windows()
screen.showMaximized()

sys.exit(app.exec_())